{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"Creates Lambda functions which enable the lookup of 'upstream' Stack Outputs and Resources from within a 'downstream' CloudFormation template (without having to use code external to the template) ",
   "Resources":{
      "rValidateIAM":{
         "Type":"AWS::Lambda::Function",
         "Properties":{
            "Code":{
               "ZipFile":{
                  "Fn::Join":[
                     "",
                     [
                        "var aws = require('aws-sdk');",
                        "var config = new aws.ConfigService();",
                        "var iam = new aws.IAM();",
                        "function checkDefined(reference, referenceName) {",
                        "  if (!reference) {",
                        "    console.log(\"Error: \" + referenceName + \" is not defined\");",
                        "    throw referenceName;",
                        "  }",
                        "  return reference;",
                        "}",
                        "function isApplicable(configurationItem, event) {",
                        "  checkDefined(configurationItem, \"configurationItem\");",
                        "  checkDefined(event, \"event\");",
                        "  var status = configurationItem.configurationItemStatus;",
                        "  var eventLeftScope = event.eventLeftScope;",
                        "  return ('OK' === status || 'ResourceDiscovered' === status) && false === eventLeftScope;",
                        "}",
                        "exports.handler = function(event, context) {",
                        "  event = checkDefined(event, \"event\");",
                        "  var invokingEvent = JSON.parse(event.invokingEvent);",
                        "  var configurationItem = checkDefined(invokingEvent.configurationItem, \"invokingEvent.configurationItem\");",
                        "  var compliance = 'NOT_APPLICABLE';",
                        "  var putEvaluationsRequest = {};",
                        "  if (isApplicable(invokingEvent.configurationItem, event)) {",
                        "    compliance = 'NOT_APPLICABLE';",
                        "   var params = {",
                        "      UserName: configurationItem.configuration.userName",
                        "    };",
                        "    iam.listMFADevices(params, function(err,data){",
                        "      if (err){",
                        "        responseData = { Error: 'listMFADevices call failed'};",
                        "        console.log(responseData.Error + ':\\n', err);",
                        "      } else {",
                        "        if (data.MFADevices.length < 1) {",
                        "          compliance = 'NON_COMPLIANT';",
                        "        } else {",
                        "          compliance = 'COMPLIANT';",
                        "        }",
                        "        putEvaluationsRequest.Evaluations = [",
                        "          {",
                        "            ComplianceResourceType: configurationItem.resourceType,",
                        "            ComplianceResourceId: configurationItem.resourceId,",
                        "            ComplianceType: compliance,",
                        "            OrderingTimestamp: configurationItem.configurationItemCaptureTime",
                        "          }",
                        "        ];",
                        "        putEvaluationsRequest.ResultToken = event.resultToken;",
                        "        config.putEvaluations(putEvaluationsRequest, function (err, data) {",
                        "          if (err) {",
                        "            context.fail(err);",
                        "          } else {",
                        "            context.succeed(data);",
                        "          }",
                        "        });",
                        "      }",
                        "    });",
                        "  }",
                        "};"
                     ]
                  ]
               }
            },
            "Handler":"index.handler",
            "Runtime":"nodejs",
            "Timeout":"30",
            "Role":{
               "Fn::GetAtt":[
                  "lambdaExecutionRole",
                  "Arn"
               ]
            }
         }
      },
      "rIAMRule":{
         "Type":"AWS::Config::ConfigRule",
         "Properties":{
            "ConfigRuleName":{
               "Ref":"AWS::StackName"
            },
            "Scope":{
               "ComplianceResourceTypes":[
                  "AWS::IAM::User"
               ]
            },
            "Source":{
               "Owner":"CUSTOM_LAMBDA",
               "SourceDetails":[
                  {
                     "EventSource":"aws.config",
                     "MessageType":"ConfigurationItemChangeNotification"
                  }
               ],
               "SourceIdentifier":{
                  "Fn::GetAtt":[
                     "rValidateIAM",
                     "Arn"
                  ]
               }
            }
         },
         "DependsOn":"rConfigPermissionToCallLambda"
      },
      "rConfigPermissionToCallLambda":{
         "Type":"AWS::Lambda::Permission",
         "Properties":{
            "FunctionName":{
               "Fn::GetAtt":[
                  "rValidateIAM",
                  "Arn"
               ]
            },
            "Action":"lambda:InvokeFunction",
            "Principal":"config.amazonaws.com"
         }
      },
      "lambdaExecutionRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Statement":[
                  {
                     "Action":[
                        "sts:AssumeRole"
                     ],
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "lambda.amazonaws.com"
                        ]
                     }
                  }
               ],
               "Version":"2012-10-17"
            },
            "Path":"/",
            "Policies":[
               {
                  "PolicyDocument":{
                     "Statement":[
                        {
                           "Action":[
                              "iam:List*",
                              "iam:Get*"
                           ],
                           "Effect":"Allow",
                           "Resource":"*"
                        },
                        {
                           "Action":[
                              "config:*"
                           ],
                           "Effect":"Allow",
                           "Resource":"*"
                        }
                     ],
                     "Version":"2012-10-17"
                  },
                  "PolicyName":"root"
               }
            ]
         }
      }
   },
   "Outputs":{
     "StackName":{
       "Value":{
         "Ref":"AWS::StackName"
       }
     }
   }
}
