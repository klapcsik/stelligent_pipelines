{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Dromedary demo - application instance",
  "Parameters": {
    "Ec2Key": {
      "Type": "String",
      "Description": "Ec2 key for ssh access",
      "Default": ""
    },
    "SubnetId": {
      "Type": "String",
      "Description": "VPC subnet id in which to place instance"
    },
    "VPC": {
      "Type": "String",
      "Description": "VPC id in which to place instance"
    },
    "CfnInitRole": {
      "Type": "String",
      "Description": "IAM Role for cfn-init"
    },
    "InstanceProfile": {
      "Type": "String",
      "Description": "Instance profile for app instance"
    },
    "S3Bucket": {
      "Type": "String",
      "Description": "Artifact Bucket"
    },
    "ArtifactPath": {
      "Type": "String",
      "Description": "Path to tarball in Artifact Bucket",
      "Default": ""
    },
    "CodeDeployTag": {
      "Type": "String",
      "Description": "Resource Tags for Deployment Group (non-zero enables CodeDeploy agent)",
      "Default": "1"
    },
    "DynamoDbTable": {
      "Type": "String",
      "Description": "DynamoDb table name for persistent storage",
      "MaxLength": 32,
      "MinLength": 1
    }
  },
  "Mappings": {
    "RegionConfig": {
      "us-east-1": {
        "ami": "ami-2d652448"
      }
    }
  },
  "Conditions": {
    "NoEc2Key": {
      "Fn::Equals": [
        {
          "Ref": "Ec2Key"
        },
        ""
      ]
    },
    "InstallCodeDeploy": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CodeDeployTag"
            },
            ""
          ]
        }
      ]
    }
  },
  "Resources": {
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Enable SSH access via port 22",
        "SecurityGroupIngress": [
          {
            "CidrIp": "70.138.67.94/32",
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          },
          {
            "CidrIp": "70.138.67.94/32",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "CidrIp": "70.138.67.94/32",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          },
          {
            "CidrIp": "70.138.67.94/32",
            "FromPort": "8080",
            "IpProtocol": "tcp",
            "ToPort": "8080"
          }
        ],
        "SecurityGroupEgress": [
          {
            "CidrIp": "70.138.67.94/32",
            "FromPort": "-1",
            "IpProtocol": "tcp",
            "ToPort": "-1"
          }
        ]
      }
    },
    "WebServerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionConfig",
            {
              "Ref": "AWS::Region"
            },
            "ami"
          ]
        },
        "InstanceType": "m4.large",
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "KeyName": {
          "Fn::If": [
            "NoEc2Key",
            {
              "Ref": "AWS::NoValue"
            },
            {
              "Ref": "Ec2Key"
            }
          ]
        },
        "Tags": {
          "Fn::If": [
            "InstallCodeDeploy",
            [
              {
                "Key": "Application",
                "Value": {
                  "Ref": "AWS::StackId"
                }
              },
              {
                "Key": "Name",
                "Value": {
                  "Ref": "AWS::StackName"
                }
              },
              {
                "Key": "environment",
                "Value": {
                  "Ref": "CodeDeployTag"
                }
              }
            ],
            [
              {
                "Key": "Application",
                "Value": {
                  "Ref": "AWS::StackId"
                }
              },
              {
                "Key": "Name",
                "Value": {
                  "Ref": "AWS::StackName"
                }
              }
            ]
          ]
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "InstanceSecurityGroup"
              }
            ],
            "SubnetId": {
              "Ref": "SubnetId"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "\n",
                "# Helper functions\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\"",
                " --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource WebServerInstance ",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "  exit 1\n",
                "}\n",
                "function cfn_init\n",
                "{\n",
                "  /opt/aws/bin/cfn-init -v -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r WebServerInstance --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --role ",
                {
                  "Ref": "CfnInitRole"
                },
                " \"$@\"\n",
                "}\n",
                "function cfn_signal_ok\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 0 ",
                " --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource WebServerInstance ",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || true\n",
                "}\n",
                "\n",
                "if ! which chef-solo > /dev/null 2>&2; then\n",
                "  cfn_init -c chef || error_exit 'Failed to run cfn-init chef'\n",
                "fi\n",
                "\n",
                "if [ -e /.dromedary-prereqs-installed ]; then\n",
                "  cfn_init -c noprereqs || error_exit 'Failed to run cfn-init noprereqs'\n",
                "else\n",
                "  yum -y upgrade\n",
                "  cfn_init || error_exit 'Failed to run cfn-init'\n",
                "fi\n",
                "cfn_signal_ok\n",
                "\n"
              ]
            ]
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "base": {
            "commands": {
              "10-extract-dromedary": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "mkdir -p -m755 /userdata\n",
                      "cd /userdata\n",
                      "tar xzf /tmp/dromedary.tgz\n"
                    ]
                  ]
                }
              },
              "20-run-chef": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cat > /userdata/solo.rb <<SOLORB\n",
                      "cookbook_path ['/userdata']\n",
                      "SOLORB\n",
                      "\n",
                      "chef-solo --config /userdata/solo.rb --log_level auto --force-formatter --json-attributes /userdata/dromedary/attributes.json\n",
                      "node -v \n",
                      "npm -v\n"
                    ]
                  ]
                },
                "cwd": "/userdata",
                "env": {
                  "DROMEDARY_DDB_TABLE_NAME": {
                    "Ref": "DynamoDbTable"
                  },
                  "HOME": "/root"
                }
              }
            },
            "files": {
              "/tmp/dromedary.tgz": {
                "authentication": "S3AccessCreds",
                "group": "root",
                "mode": "000644",
                "owner": "root",
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      "https://s3.amazonaws.com/",
                      {
                        "Ref": "S3Bucket"
                      },
                      "/",
                      {
                        "Ref": "ArtifactPath"
                      }
                    ]
                  ]
                }
              }
            }
          },
          "chef": {
            "commands": {
              "10-install-chef": {
                "command": "rpm -ivh /tmp/chefdk.rpm"
              }
            },
            "files": {
              "/tmp/chefdk.rpm": {
                "group": "root",
                "mode": "000644",
                "owner": "root",
                "source": "https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chefdk-0.7.0-1.el6.x86_64.rpm"
              }
            }
          },
          "configSets": {
            "base": [
              "base"
            ],
            "chef": [
              "chef"
            ],
            "default": [
              {
                "ConfigSet": "base"
              }
            ],
            "noprereqs": [
              "noprereqs"
            ]
          },
          "noprereqs": {
            "commands": {
              "10-extract-dromedary": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "mkdir -p -m755 /userdata\n",
                      "cd /userdata\n",
                      "tar xzf /tmp/dromedary.tgz\n"
                    ]
                  ]
                }
              },
              "20-run-chef": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cat > /userdata/solo.rb <<SOLORB\n",
                      "cookbook_path ['/userdata']\n",
                      "SOLORB\n",
                      "\n",
                      "chef-solo --config /userdata/solo.rb --log_level auto --force-formatter --json-attributes /userdata/dromedary/attributes-noprereqs.json\n",
                      "node -v \n",
                      "npm -v\n"
                    ]
                  ]
                },
                "cwd": "/userdata",
                "env": {
                  "DROMEDARY_DDB_TABLE_NAME": {
                    "Ref": "DynamoDbTable"
                  },
                  "HOME": "/root"
                }
              }
            },
            "files": {
              "/tmp/dromedary.tgz": {
                "authentication": "S3AccessCreds",
                "group": "root",
                "mode": "000644",
                "owner": "root",
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      "https://s3.amazonaws.com/",
                      {
                        "Ref": "S3Bucket"
                      },
                      "/",
                      {
                        "Ref": "ArtifactPath"
                      }
                    ]
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "Outputs": {
    "PublicDns": {
      "Description": "Public DNS of Dromedary App instance",
      "Value": {
        "Fn::GetAtt": [
          "WebServerInstance",
          "PublicIp"
        ]
      }
    },
    "InstanceId": {
      "Description": "Dromedary App instance id",
      "Value": {
        "Ref": "WebServerInstance"
      }
    },
    "InstanceSecurityGroup": {
      "Description": "Security group id of app instance",
      "Value": {
        "Ref": "InstanceSecurityGroup"
      }
    }
  }
}
